<?php

namespace fw;
use Respect\Validation\Validator;

class FormFieldMultiLang extends FormField{
    private $Langs;
    private $Fields = array();
    function __construct($name, $field, $langs = array('es', 'en'))
    {

        $this->addHtmlField((new $field($name))->getHtmlField());
        $this->Langs = $langs;
        $this->Validator = new Validator();
        foreach ($this->Langs as $l) {
            $fname = $name.'-'.$l.'';
            $this->Fields[$l] = new $field($fname);
            $this->Fields[$l]->setName($fname);
            $this->Fields[$l]->getHtmlField(0)->setAttr('data-lang', $l);
        }
        parent::__construct($name);


    }
    public function getFields(){
        return $this->Fields;
    }

    public function setValue($value)
    {
        if(is_string($value)) {
            $value = json_decode($value, true);
        }
        array_walk_recursive($value, function(&$value,&$key){
            $value =  utf8_decode($value);
        });
        if(is_string($value)) $value = json_decode($value, true);
        foreach ($this->Fields as $l=>$f) {
            $f->setValue(@$value[$l]);
        }
    }


    public function getRawData()
    {
        $out = array();
        foreach ($this->Langs as $l) {
            if(($val = $this->Fields[$l]->getRawData()) !== null)
                $out[$l] = utf8_encode($val);
        }
        return $out;
    }

    public function getLanguages(){
        return $this->Langs;
    }
    public function validate()
    {
        $res = true;
        foreach ($this->Fields as $l=>$f) {
            //$r = $f->validate($val[$l]); // TODO: Change the autogenerated stub
            parent::setInputData($f->getInputData());
            $r =  parent::validate();
            if(!$r){
                $res = false;
                $this->setError('Hay un error en alguno de los lenguajes de '.$this->getLabel().'.');
            }
        }
        return $res;
    }

}